openapi: 3.0.3
info:
  title: Library API
  version: 1.3.9
  description: |
    L2 - H2
    STD22048 RAKOTONIAINA Joro Sullivan
    STD22005 Fanomezana Nathanael
servers:
  - url: https://library.com
tags:
  - name: books
  - name: authors
  - name: books and authors relation
  - name: import
  - name: visitors
paths:
  /books:
    get:
      
      tags:
        - "books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: "#/components/parameters/QueryPagination"
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDate
          description: Start date of the release interval
          required: false
          schema:
            type: string
            format: datetime
        - in: query
          name: endDate
          description: End date of the release interval
          required: false
          schema:
            type: string
            format: datetime

      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        
    put:
      tags:
        - "books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      responses:
        '200':
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /authors:
    get:
      tags:
        - "authors"
      summary: get all authors
      operationId: getAuthors
      parameters:
        - in: query
          name: return authors by given name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: the list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        '400':
          $ref: '#/components/responses/400'      
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - "authors"
      summary: Create or update a list of Author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - "authors"
      summary: delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          required: true
          name: author's name to delete
          schema:
            type: string
      responses:
        '204':
          description: author deleted
        '500':
          $ref: '#/components/responses/500'

  /authors/{PathPagination}:
    get:
      summary: retrieve authors with pagination
      tags:
        - "authors"
      parameters:
        - $ref: "#/components/parameters/PathPagination"

      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "books and authors relation"
      summary: update author of a book
      operationId: updateBookIdAuthorId
      parameters:
        - name: bookId
          description: book's id to update
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          description: new author's id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Author of the book updated successfully
        '404':
          description: author or book's id not found
        '500':
          $ref: '#/components/responses/500'
  /books/authors:
    put:
      tags:
        - "books and authors relation"
      summary: update book's author
      operationId: updateBookAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        '200':
          description: Authors for books updated successfully
        '404':
          description: authors or books not found
        '500':
          $ref: '#/components/responses/500'

  /books/import:
    post:
      tags:
        - "import"
      summary: return the list of imported books in JSON or Excel
      operationId: booksImported
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ImportBook"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ImportBook"

      responses:
        '200':
          $ref: "#/components/responses/200"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /authors/import:
    post:
      tags:
        - "import"
      summary: return the list imported of Author in JSON or Excel
      operationId: AuthorImport
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ImportAuthor"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ImportAuthor"

      responses:
        '200':
          $ref: "#/components/responses/200"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /visitors/{visistorsId}/book/{bookId}/borrow:
    post:
      tags:
        - visitors
      summary: Visitor borrows a book
      operationId: borrowBook
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book successfully borrowed
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /visitors/{visistorsId}/book/{bookId}/return:
    post:
      tags:
        - visitors
      summary: Visitor returns a book
      operationId: returnBook
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book successfully returned
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /books/borrowed:
    get:
      tags:
        - books
      summary: Get the list of borrowed books
      operationId: getBorrowedBooks
      responses:
        '200':
          $ref: "#/components/responses/200"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /books/available:
    get:
      tags:
        - books
      summary: Get the list of available book
      operationId: getAvailableBooks
      responses:
        '200':
          $ref: "#/components/responses/200"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /visitors/{visitorId}/activities:
    get:
      tags:
        - visitors
      summary: Get visitor activities for specified period
      operationId: getVisitorActivities
      parameters:
        - in: path
          name: visitorId
          description: Id of the Visitor
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          description: Start Date of the period
          required: true
          schema:
            type: string
            format: datetime
        - in: query
          name: endDate
          description: End date of the period
          required: true
          schema:
            type: string
            format: datetime
      responses:
        '200':
          description: List of visitor activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Activity"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

components:
  schemas:
    Book:
      allOf:
        - $ref: "#/components/schemas/crupdateBook"
      properties:
        author:
          $ref: "#/components/schemas/Author"
        status:
          type: string
          enum:
            - available
            - borrowed
        borrower:
          type: string
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: datetime

    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    body:
      type: object
    APIresponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/status"
        body:
          $ref: "#/components/schemas/body"
    Response200:
      allOf:
        - $ref: "#/components/schemas/APIresponse"
      description: operation successfully

    

    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    ImportBook:
      type: object
      allOf:
        - $ref: "#/components/schemas/crupdateBook"
      properties:
        idAuthor:
          type: integer

    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
    ResponseBorrow:
      allOf:
        - $ref: "#/components/schemas/APIresponse"
      description: Book successfully borrowed

    ResponseReturn:
      allOf:
        - $ref: "#/components/schemas/APIresponse"
      description: Book succesfully returned

    ResponseBooksList:
      allOf:
        - $ref: "#/components/schemas/APIresponse"
      description: List of books

    Activity:
      type: object
      properties:
        id:
          type: string
        visitorId:
          type: string
        bookId:
          type: string
        action:
          type: string
          enum:
            - borrow
            - return
        timestamp:
          type: string
          format: datetime
    
    Exception:
          type: object
          properties:
            type:
              type: string
            message:
              type: string
    BadRequestException:
          allOf:
            - $ref: '#/components/schemas/Exception'
          example:
            type: BadRequestException
            message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    InternalServerException:
        allOf:
          - $ref: '#/components/schemas/Exception'
        example:
          type: InternalServerException
          message: Unexpected error         

  parameters:
    QueryPagination:
      name: QueryPagination
      in: query
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50

    PathPagination:
      name: PathPagination
      in: path
      required: true
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          size:
            type: integer
            default: 50
  responses:
    '200':
      $ref: "#/components/schemas/Response200"
    '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    '403':
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotAuthorizedException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  securitySchemes:
    library_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "https://library.com/oauth/authorize"
          scopes:
            read: read acces to library ressources
            write: write acces to ressources
            admin: full administrative acces to the library