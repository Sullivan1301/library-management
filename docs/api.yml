openapi: 3.0.3
info:
  title: Library API
  version: 1.2.8
  description: STD22048 - H2 - L2  RAKOTONIAINA Joro Sullivan 
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
paths:
  /books:
    get:
      tags:
        - Books     
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query 
          name: releaseDateStart
          description: Filter books released on or after the specified date
          required: false
          schema: 
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books released on or before the specified date
          required: false
          schema: 
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /authors: 
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of authors, which can be sorted by name
      operationId: getAuthors
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - in : query
          name: authorName
          description: Filter return authors by given name 
          required: false
          schema: 
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema: 
                type: array
                items:
                    $ref: '#/components/schemas/Author'
    put:
      tags:
        - Authors
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Authors
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorId
          description: The ID of the author will be deleted
          required: true
          schema: 
            type: string
      responses:
        200:
          description: Author ID has been deleted
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Modify Book's Author specifying their ID
      operationId: crupdateBook
      parameters:
        - in : path
          name: bookId
          description: The ID of book to be updated
          required: true
          schema:
            type : string
        - in : path
          name : authorId
          description: The ID of author to be updated
          required: true
          schema:
            type: string
      responses:
        200:
          description: Book's author modified
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      tags:
        - Books
        - Authors
      summary: Updating Book Author
      operationId: UpdateBookAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Book authors updated
  /author/page/{page}/size/{size}:
    get:
      tags:
        - Authors
      summary: Get paginated authors
      description: Retrieve a paginated list of authors,
      operationId: getAuthorsPaginated
      parameters:
        - in : path
          name: page
          description: Page number for pagination
          schema:
            type: integer
            default: 1
          required: true
        - in : path
          name : size
          description: Number of items per page for pagination
          schema:
            type: integer
            default: 50
          required: true
      responses:
        200 :
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /books/import:
    post:
      tags:
        - Books
      summary: Import books
      operationId: importBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBook'
                - $ref: '#/components/schemas/ImportBookExcel'
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors/import:
    post:
      tags:
        - Authors
      summary: Import authors
      operationId: importAuthors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthor'
                - $ref: '#/components/schemas/ImportAuthorExcel'
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
components:
  schemas:
    Book:
      type: object
      properties:
        allOf:
          $ref: '#/components/schemas/Cruptade'
        author:
          $ref: '#/components/schemas/Author'

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
       - M
       - F

    Cruptade:
      type: object
      properties:
        id:
          type: string  
        bookName:
          type: string 
        pageNumbers:
          type: integer
        topic: 
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releasedDate:
          type: string
          format: date

    UpdateBookAuthor:
      type: object
      properties:
        bookId:
         type: string
        authorId:
         type: string

    BaseApiResponses:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        body:
          type: object

    Status:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success!"

    ApiResponses200:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponses'
        - properties:
            body:
              $ref: '#/components/schemas/BodyFor200'

    ApiResponses400:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponses'
        - properties:
            body:
              $ref: '#/components/schemas/BodyFor400'


    ApiResponses403:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponses'
        - properties:
            body:
              $ref: '#/components/schemas/BodyFor403'

    ApiResponses500:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponses'
        - properties:
            body:
              $ref: '#/components/schemas/BodyFor500'
              
    BodyFor200:
      type: object
      properties:
        example:
          type: string
          example: "It's OK!"

    BookList200:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponses'
      properties:
        body: 
          type: array
          items: 
            $ref: '#/components/schemas/Book'

    BodyFor400:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponses'
          body: {}
          example:
            code : 400
            description:  "Bad Request!"

    BodyFor403:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponses'
          body : {}
          example: 
            code: 403
            default: "Forbidden"

    BodyFor500:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponses'
          body: {}
          example: 
            code: 500
            description: "Internal Servor Error"

    ImportAuthor:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/ImportData'

    ImportBook:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/ImportData'

    ImportData:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/Author'
        sex:
          $ref: '#/components/schemas/Sex'
        book:
          $ref: '#/components/schemas/Book'

    ImportAuthorExcel:
      type: object
      properties:
        file:
          description: Excel file containing author information

    ImportBookExcel:
      type: object
      properties:
        file:
          description: Excel file containing book information

  parameters:
    queryPagination:
      name: page
      in: query
      description: Page's number for the pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50

  responses: 
    "BookList200":
      $ref: '#/components/schemas/BookList200'    
      description: Return list of book

    400:
      $ref: '#/components/schemas/BodyFor400'

    403:
      $ref: '#/components/schemas/BodyFor403'

    500:
      $ref: '#/components/schemas/BodyFor500'    
