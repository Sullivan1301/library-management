openapi: 3.0.3
info:
  title: Library API
  version: 1.1.2
  description: STD22048 - H2 - L2  RAKOTONIAINA Joro Sullivan 
servers:
  - url: https://library.com
tags:
  - name: books
  - name: authors
paths:
  /books:
    get:
      tags:
        - books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query 
          name: releaseDateStart
          description: Filter books released on or after the specified date
          required: false
          schema: 
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books released on or before the specified date
          required: false
          schema: 
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors: 
    get:
      tags:
        - authors
      summary: Get all authors
      description: Retrieve a list of authors, which can be sorted by name
      operationId: getAuthors
      parameters:
        - in : query
          name: authorName
          description: Filter return authors by given name 
          required: false
          schema: 
            type: string
      responses:
        200:
          description: The list of filtered authors 
          content:
            application/json:
              schema: 
                type: array
                items:
                    $ref: '#/components/schemas/Author'
    put:
      tags:
        - authors
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema: 
              type: array
              items:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  #/authors/{authorId}:
  # delete:
  #    tags:
  #       -authors
  #   summary: Delete an author
  #   operationID: deleteAuthor
  #   parameters:
  #     -name : authorId
  #     -in : path
  #     -description: Author identifier to be deleted
  #     -schema:
  #       type: string
  #     -required: true  
  #   responses:
  #     200:
  #       description: The author deleted
  #       content:
  #         application/json: 
  #           schema:
  #             $ref: '#/components/schemas/Author'  
    delete:
      tags:
        - authors 
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorId
          description: The author with the ID will be deleted
          required: true
          schema: 
            type: string
      responses:
        200:
          description: Author with ID has been deleted
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers: 
          type: integer
        topic: 
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releasedDate:
          type: string
          format: date
        author:
          $ref: '#/components/schemas/Author'
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex: 
          $ref: '#/components/schemas/Sex'
      #required:
      #  -id
    Sex:
      type: string
      enum:
        - M
        - F