openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22048 - H2 - L2  RAKOTONIAINA Joro Sullivan 
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
paths:
  /books:
    get:
      tags:
        - Books     
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query 
          name: releaseDateStart
          description: Filter books released on or after the specified date
          required: false
          schema: 
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books released on or before the specified date
          required: false
          schema: 
            type: string
            format: date
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page for paginaton
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /authors: 
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of authors, which can be sorted by name
      operationId: getAuthors
      parameters:
        - in : query
          name: authorName
          description: Filter return authors by given name 
          required: false
          schema: 
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema: 
                type: array
                items:
                    $ref: '#/components/schemas/Author'
    put:
      tags:
        - Authors
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Authors
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorId
          description: The ID of the author will be deleted
          required: true
          schema: 
            type: string
      responses:
        200:
          description: Author ID has been deleted
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Modify Book's Author specifying their ID
      operationId: crupdateBook
      parameters:
        - in : path
          name: bookId
          description: The ID of book to be updated
          required: true
          schema:
            type : string
        - in : path
          name : authorId
          description: The ID of author to be updated
          required: true
          schema:
            type: string
      responses:
        200:
          description: Book's author modified
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      summary: Updating Book Author
      operationId: UpdateBookAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Book authors updated
  /author/page/{page}/size/{size}:
    get:
      tags:
        - Authors
      summary: Get paginated authors
      description: Retrieve a paginated list of authors,
      operationId: getAuthorsPaginated
      parameters:
        - in : path
          name: page
          description: Page number for pagination
          schema:
            type: integer
            default: 1
          required: true
        - in : path
          name : size
          description: Number of items per page for pagination
          schema:
            type: integer
            default: 50
          required: true
      responses:
        200 :
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
components:
  schemas:
    Book:
      type: object
      properties:
        allOf:
          $ref: '#/components/schemas/Cruptade'
        author:
          $ref: '#/components/schemas/Author'

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
       - M
       - F
    Cruptade:
      type: object
      properties:
        id:
          type: string  
        bookName:
          type: string 
        pageNumbers:
          type: integer
        topic: 
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releasedDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
         type: string
        authorId:
         type: string
